<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MAIN" Id="{7c90e337-da70-41ec-ab5c-8c28e27e5b13}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	// open flap command
	OpenFlap:	BOOL;
	// close flap command
	CloseFlap:	BOOL;
	// open slit command
	OpenSlit:	BOOL;
	// close slit command
	CloseSlit:	BOOL;
	// flap open state
	FlapOpen:	BOOL := TRUE; // assume Flap Open after restart
	// flap closed state
	FlapClosed:	BOOL := FALSE;
	// slit open state
	SlitOpen:	BOOL := TRUE; // assume Slit Open after restart
	// slit closed state
	SlitClosed:	BOOL := FALSE;
	// assume dome open, after power loss / reboot
	DomeOpen:	BOOL := FALSE;
	// dome closed state
	DomeClosed:	BOOL := FALSE;
	// control word is valid
	Valid:		BOOL;
	// timer to delay the flap
	FlapDelay: TON;
	// timer to delay the slit on reverse of direction
	SlitDelay:	TON;
	FlapTimer,
	SlitTimer:	TP := (PT := T#60S);
	FlapDone,
	SlitDone:	F_TRIG;
	SyncOut:	TON;
	TimeOut:	TON;
	WD_LED:		E_CX81x0_LED;
	ERR_LED:	E_CX81x0_LED;
	DomeOpenEvent:		FB_EventLog;
	DomeClosedEvent:	FB_EventLog;
	SyncEvent:		FB_Eventlog;
	TimeoutEvent:	FB_Eventlog;
	ADSErrorEvent:	FB_Eventlog;
	ReadCycle:	TON := (PT:=T#100MS);
	fbReadReq:	ADSREAD := ( NETID := '5.78.96.50.1.1', PORT := 851, TMOUT := DEFAULT_ADS_TIMEOUT );
	ControlWord: 	WORD;
	Busy:	BOOL;
	ADSError:	BOOL;
	ADSErrorID: UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
Dome Control Remote Unit CX8190
########################

The dome is controlled by the main PLC using the GVL_Dome.ControlWord,
which is used to exchange commands to open and close the slit and the flap
and to report wether the dome is open or closed.
*)
//NewADSRoute();
ReadCycle(IN := TRUE);
IF ReadCycle.Q THEN
	// read if the ADS command is busy
	fbReadReq(	READ := FALSE,
				BUSY => Busy,
				ERR =>	ADSError,
				ERRID => ADSErrorID);
	IF NOT Busy THEN
		fbReadReq(  IDXGRP := 16#4020, 
					IDXOFFS := 0, 
					LEN := SIZEOF(ControlWord), 
					DESTADDR := ADR(ControlWord),
					READ := TRUE,
					BUSY => Busy,
					ERR =>	ADSError,
					ERRID => ADSErrorID);
		ReadCycle(IN := FALSE);
	ELSE
		// reset the read command
		fbReadReq(READ := FALSE);
	END_IF
	IF NOT ADSError THEN // we have valid data
		Valid := 	ControlWord.0;
		OpenFlap := ControlWord.1;
		OpenSlit := ControlWord.2;
		CloseFlap := NOT ControlWord.1;
		CloseSlit := NOT ControlWord.2;
		ERR_LED := E_CX81x0_LED.eCX81x0_LED_RED_OFF;
	ELSE
		// reset the control word
		ControlWord := 0;
	END_IF
	
END_IF

// This is the sync timeout. If we loose the sync for 5 seconds, we issue a warning.
SyncOut(IN := NOT Valid, PT := T#5S);
IF SyncOut.Q THEN
	ERR_LED := E_CX81x0_LED.eCX81x0_LED_RED_FLASHING_200ms;
END_IF

// This is the watchdog timer. If we don't get a valid signal within n seconds, we issue to close the dome.
TimeOut(IN := NOT Valid, PT := T#30S);
IF TimeOut.Q THEN
	CloseFlap := NOT FlapClosed;
	CloseSlit := NOT SlitClosed;
	ERR_LED := E_CX81x0_LED.eCX81x0_LED_RED_ON;
END_IF

// cancel commands, if we know that the slot is closed
IF SlitClosed AND CloseSlit THEN
	CloseSlit := FALSE;
END_IF
IF SlitOpen AND OpenSlit THEN
	OpenSlit := FALSE;
END_IF
IF FlapClosed AND CloseFlap THEN
	CloseFlap := FALSE;
END_IF
IF FlapOpen AND OpenFlap THEN
	OpenFlap := FALSE;
END_IF

IF CloseSlit AND SlitTimer.Q THEN
	OpenSlit := FALSE;
	GVL_Dome.Slit_open := FALSE;
	WD_LED := E_CX81x0_LED.eCX81x0_LED_GREEN_FLASHING_500ms;
END_IF

IF OpenSlit AND SlitTimer.Q THEN
	GVL_Dome.Slit_open := TRUE;
	WD_LED := E_CX81x0_LED.eCX81x0_LED_RED_FLASHING_500ms;
END_IF

IF CloseFlap AND FlapTimer.Q  THEN
	OpenFlap := FALSE;
	GVL_Dome.Flap_open := FALSE;
	WD_LED := E_CX81x0_LED.eCX81x0_LED_GREEN_FLASHING_200ms;
END_IF

IF OpenFlap AND FlapTimer.Q THEN
	GVL_Dome.Flap_open := TRUE;
	WD_LED := E_CX81x0_LED.eCX81x0_LED_RED_FLASHING_200ms;
END_IF

// if we reverse the direction of the flap, wait n milliseconds, otherwise we blow the fuse
FlapDelay(  IN := OpenFlap OR CloseFlap,
			PT := T#1000MS);
// After an initial delay, enable the signal for n seconds to move the flap.
// we have to use different times for opening and closing especially at low temperatures
IF OpenFlap THEN
	FlapTimer.PT := T#30S;
ELSIF CloseFlap THEN
	FlapTimer.PT := T#60S;
END_IF			
FlapTimer(  IN := FlapDelay.Q,
			Q => GVL_Dome.Flap_enable);
// a falling edge of the enable signal indicates, that we are done
FlapDone(CLK := GVL_Dome.Flap_enable);
// deactivate open or close signal if enable becomes false;
IF FlapDone.Q THEN
	IF OpenFlap THEN
		FlapOpen 	:= TRUE;
		FlapClosed 	:= FALSE;
	ELSIF CloseFlap THEN
		FlapClosed 	:= TRUE;
		FlapOpen 	:= FALSE;
	END_IF
	OpenFlap := FALSE;
	CloseFlap := FALSE;
END_IF
			
// if we reverse the direction of the flap, wait n milliseconds, otherwise we blow the fuse
SlitDelay(  IN := OpenSlit OR CloseSlit, 
			PT := T#1000MS); 

// After an initial delay, enable the signal for n seconds to move the slit.			
SlitTimer(  IN := SlitDelay.Q,
			PT := T#70S,
			Q => GVL_Dome.Slit_enable); 
// a falling edge of the enable signal indicates, that we are done			
SlitDone(CLK := GVL_Dome.Slit_enable);

IF SlitDone.Q THEN
	IF OpenSlit THEN
		SlitOpen := TRUE;
		SlitClosed := FALSE;
	ELSIF CloseSlit THEN
		SlitClosed := TRUE;
		SlitOpen := FALSE;
	END_IF
	OpenSlit := FALSE;
	CloseSlit := FALSE;
END_IF

IF DomeOpen THEN
	WD_LED := E_CX81x0_LED.eCX81x0_LED_RED_ON;
END_IF
IF DomeClosed THEN
	WD_LED := E_CX81x0_LED.eCX81x0_LED_GREEN_ON;
END_IF

DomeOpen := FlapOpen AND SlitOpen;
DomeClosed := FlapClosed AND SlitClosed;

F_CX8190_LED_WD(eMode := WD_LED);
F_CX8190_LED_ERR(eMode := ERR_LED);

// set the status word
GVL_Dome.StatusWord.0 := TRUE;
GVL_Dome.StatusWord.1 := DomeOpen;
GVL_Dome.StatusWord.2 := DomeClosed;
GVL_Dome.StatusWord.3 := FlapOpen;
GVL_Dome.StatusWord.4 := FlapClosed;
GVL_Dome.StatusWord.5 := SlitOpen;
GVL_Dome.StatusWord.6 := SlitClosed;
GVL_Dome.StatusWord.7 := SyncOut.Q;
GVL_Dome.StatusWord.8 := TimeOut.Q;
GVL_Dome.StatusWord.9 := GVL_Dome.Input7;

DomeOpenEvent(
	Trigger := DomeOpen, 
	Level := ADSLOG_MSGTYPE_WARN,
	OnMessage := 'Dome is open.');

DomeClosedEvent(
	Trigger := DomeClosed, 
	Level := ADSLOG_MSGTYPE_HINT,
	OnMessage := 'Dome is closed.');

SyncEvent(
	Trigger := SyncOut.Q, 
	Level := ADSLOG_MSGTYPE_WARN,
	OnMessage := 'Synchronisation was lost.');
	
TimeoutEvent(
	Trigger := TimeOut.Q, 
	Level := ADSLOG_MSGTYPE_ERROR,
	OnMessage := 'Communication Timeout.',
	OffMessage := 'Communication reestablished');
	
ADSErrorEvent(
	Trigger := ADSError, 
	Level := ADSLOG_MSGTYPE_ERROR,
	FormatString := 'ADS Communication Error: %s',
	OnMessage := DWORD_TO_HEXSTR(ADSErrorID, 4, FALSE));
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="156" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="157" Count="0" />
      <LineId Id="489" Count="0" />
      <LineId Id="444" Count="1" />
      <LineId Id="572" Count="3" />
      <LineId Id="571" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="453" Count="3" />
      <LineId Id="472" Count="0" />
      <LineId Id="468" Count="2" />
      <LineId Id="475" Count="0" />
      <LineId Id="478" Count="1" />
      <LineId Id="577" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="499" Count="7" />
      <LineId Id="509" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="507" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="264" Count="1" />
      <LineId Id="268" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="340" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="108" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="247" Count="3" />
      <LineId Id="253" Count="2" />
      <LineId Id="251" Count="0" />
      <LineId Id="270" Count="4" />
      <LineId Id="175" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="242" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="292" Count="10" />
      <LineId Id="167" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="442" Count="0" />
      <LineId Id="436" Count="0" />
      <LineId Id="438" Count="2" />
      <LineId Id="437" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="441" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="277" Count="1" />
      <LineId Id="334" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="285" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="276" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="148" Count="1" />
      <LineId Id="373" Count="0" />
      <LineId Id="169" Count="1" />
      <LineId Id="372" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="283" Count="1" />
      <LineId Id="67" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="216" Count="4" />
      <LineId Id="290" Count="0" />
      <LineId Id="288" Count="1" />
      <LineId Id="211" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="477" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="401" Count="0" />
      <LineId Id="403" Count="0" />
      <LineId Id="402" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="407" Count="1" />
      <LineId Id="518" Count="0" />
      <LineId Id="413" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="414" Count="1" />
      <LineId Id="419" Count="9" />
      <LineId Id="418" Count="0" />
      <LineId Id="429" Count="3" />
      <LineId Id="435" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="512" Count="2" />
      <LineId Id="517" Count="0" />
      <LineId Id="515" Count="0" />
      <LineId Id="404" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>